
LED_RGB01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000774  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000675  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000277  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10

    /* Replace with your application code */
    while (1) 
    {
		PORTD = 0xEF;
  84:	2f ee       	ldi	r18, 0xEF	; 239
		_delay_ms(1000);
		PORTD = 0xF7;
  86:	97 ef       	ldi	r25, 0xF7	; 247
		_delay_ms(1000);
		PORTD = 0xFB;
  88:	8b ef       	ldi	r24, 0xFB	; 251
	DDRD = 0xFF;

    /* Replace with your application code */
    while (1) 
    {
		PORTD = 0xEF;
  8a:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	3f ef       	ldi	r19, 0xFF	; 255
  8e:	43 ed       	ldi	r20, 0xD3	; 211
  90:	50 e3       	ldi	r21, 0x30	; 48
  92:	31 50       	subi	r19, 0x01	; 1
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0xF7;
  9e:	9b b9       	out	0x0b, r25	; 11
  a0:	3f ef       	ldi	r19, 0xFF	; 255
  a2:	43 ed       	ldi	r20, 0xD3	; 211
  a4:	50 e3       	ldi	r21, 0x30	; 48
  a6:	31 50       	subi	r19, 0x01	; 1
  a8:	40 40       	sbci	r20, 0x00	; 0
  aa:	50 40       	sbci	r21, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0xFB;
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	3f ef       	ldi	r19, 0xFF	; 255
  b6:	43 ed       	ldi	r20, 0xD3	; 211
  b8:	50 e3       	ldi	r21, 0x30	; 48
  ba:	31 50       	subi	r19, 0x01	; 1
  bc:	40 40       	sbci	r20, 0x00	; 0
  be:	50 40       	sbci	r21, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
  c6:	e1 cf       	rjmp	.-62     	; 0x8a <main+0xa>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
